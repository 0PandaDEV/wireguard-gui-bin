name: aur-auto-update

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  check-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Get latest release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const res = await github.rest.repos.getLatestRelease({
              owner: '0xle0ne',
              repo: 'wireguard-gui'
            });
            const fs = require('fs');

            let version = res.data.tag_name.replace(/^v/, '');
            version = version.replace(/-stable$/i, '');
            version = version.replace(/-.*$/, '');

            fs.appendFileSync(process.env.GITHUB_OUTPUT, `tag=${res.data.tag_name}\n`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `version=${version}\n`);

            const appImageAsset = res.data.assets.find(asset => 
              asset.name.endsWith('.AppImage') && 
              (asset.name.includes('x86_64') || asset.name.includes('amd64') || !asset.name.includes('arm'))
            );

            if (appImageAsset) {
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `download_url=${appImageAsset.browser_download_url}\n`);
            } else {
              core.setFailed('No x86_64 AppImage found in release');
            }
      - name: Check if update is needed
        id: check_update
        run: |
          PKGVER=$(grep pkgver PKGBUILD | head -n1 | cut -d'=' -f2 | tr -d ' ')
          echo "Current pkgver: $PKGVER"
          echo "Latest version: ${{ steps.get_release.outputs.version }}"
          if [ "$PKGVER" = "${{ steps.get_release.outputs.version }}" ]; then
            echo "No update needed."
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "update_needed=true" >> $GITHUB_OUTPUT
      - name: Download AppImage and calculate sha256sum
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          VERSION=${{ steps.get_release.outputs.version }}
          wget -O wireguard-gui.AppImage "${{ steps.get_release.outputs.download_url }}"
          SHA_X86_64=$(sha256sum wireguard-gui.AppImage | awk '{print $1}')
          echo "SHA_X86_64=$SHA_X86_64" >> $GITHUB_ENV
          echo "Downloaded AppImage SHA256: $SHA_X86_64"
          rm wireguard-gui.AppImage
      - name: Update PKGBUILD and .SRCINFO
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          VERSION=${{ steps.get_release.outputs.version }}

          # Update PKGBUILD
          sed -i "s/^pkgver=.*/pkgver=$VERSION/" PKGBUILD
          sed -i "s/^sha256sums_x86_64=.*/sha256sums_x86_64=('$SHA_X86_64')/" PKGBUILD

          # Update .SRCINFO
          sed -i "s/^[[:space:]]*pkgver = .*/\tpkgver = $VERSION/" .SRCINFO
          sed -i "s/^[[:space:]]*sha256sums_x86_64 = .*/\tsha256sums_x86_64 = $SHA_X86_64/" .SRCINFO
      - name: Commit and push to AUR
        if: steps.check_update.outputs.update_needed == 'true'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
      - name: Add AUR host key
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN" >> ~/.ssh/known_hosts
          echo "aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=" >> ~/.ssh/known_hosts
          echo "aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=" >> ~/.ssh/known_hosts
      - name: Set up Git
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          git config --global user.email "70103896+0PandaDEV@users.noreply.github.com"
          git config --global user.name "0PandaDEV"
      - name: Commit and push changes
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          git add PKGBUILD .SRCINFO
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "chore: update to ${{ steps.get_release.outputs.version }}"

          # Push to GitHub first
          git push origin master

          # Prepare AUR-only version working with existing history
          git remote add aur ssh://aur@aur.archlinux.org/wireguard-gui-bin.git
          git fetch aur master

          # Create branch based on AUR history
          git checkout -b aur-temp aur/master

          # Update files to match our version
          git checkout master -- PKGBUILD .SRCINFO

          # Remove .github directory if it exists in AUR
          if [ -d ".github" ]; then
            git rm -rf .github
          fi

          # Commit the changes
          git add PKGBUILD .SRCINFO
          git commit -m "chore: update to ${{ steps.get_release.outputs.version }}"

          # Push to AUR
          git push aur aur-temp:master

          # Return to master branch and clean up
          git checkout master
          git branch -D aur-temp
